// Code generated by MockGen. DO NOT EDIT.
// Source: stats_redis.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockStatsRepoer is a mock of StatsRepoer interface.
type MockStatsRepoer struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepoerMockRecorder
}

// MockStatsRepoerMockRecorder is the mock recorder for MockStatsRepoer.
type MockStatsRepoerMockRecorder struct {
	mock *MockStatsRepoer
}

// NewMockStatsRepoer creates a new mock instance.
func NewMockStatsRepoer(ctrl *gomock.Controller) *MockStatsRepoer {
	mock := &MockStatsRepoer{ctrl: ctrl}
	mock.recorder = &MockStatsRepoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepoer) EXPECT() *MockStatsRepoerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStatsRepoer) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStatsRepoerMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatsRepoer)(nil).Get), ctx, key)
}

// Health mocks base method.
func (m *MockStatsRepoer) Health(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockStatsRepoerMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStatsRepoer)(nil).Health), ctx)
}

// Incr mocks base method.
func (m *MockStatsRepoer) Incr(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockStatsRepoerMockRecorder) Incr(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStatsRepoer)(nil).Incr), ctx, key)
}

// Lock mocks base method.
func (m *MockStatsRepoer) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockStatsRepoerMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockStatsRepoer)(nil).Lock))
}

// Reset mocks base method.
func (m *MockStatsRepoer) Reset(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockStatsRepoerMockRecorder) Reset(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockStatsRepoer)(nil).Reset), ctx)
}

// Set mocks base method.
func (m *MockStatsRepoer) Set(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStatsRepoerMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStatsRepoer)(nil).Set), ctx, key, value)
}

// Unlock mocks base method.
func (m *MockStatsRepoer) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockStatsRepoerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockStatsRepoer)(nil).Unlock))
}
