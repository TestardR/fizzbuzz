// Code generated by MockGen. DO NOT EDIT.
// Source: stats.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatser is a mock of Statser interface.
type MockStatser struct {
	ctrl     *gomock.Controller
	recorder *MockStatserMockRecorder
}

// MockStatserMockRecorder is the mock recorder for MockStatser.
type MockStatserMockRecorder struct {
	mock *MockStatser
}

// NewMockStatser creates a new mock instance.
func NewMockStatser(ctrl *gomock.Controller) *MockStatser {
	mock := &MockStatser{ctrl: ctrl}
	mock.recorder = &MockStatserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatser) EXPECT() *MockStatserMockRecorder {
	return m.recorder
}

// FlushEntries mocks base method.
func (m *MockStatser) FlushEntries() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushEntries")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushEntries indicates an expected call of FlushEntries.
func (mr *MockStatserMockRecorder) FlushEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushEntries", reflect.TypeOf((*MockStatser)(nil).FlushEntries))
}

// GetMaxEntries mocks base method.
func (m *MockStatser) GetMaxEntries() (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxEntries")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMaxEntries indicates an expected call of GetMaxEntries.
func (mr *MockStatserMockRecorder) GetMaxEntries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxEntries", reflect.TypeOf((*MockStatser)(nil).GetMaxEntries))
}

// Health mocks base method.
func (m *MockStatser) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockStatserMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockStatser)(nil).Health))
}

// IncrementCount mocks base method.
func (m *MockStatser) IncrementCount(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementCount", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementCount indicates an expected call of IncrementCount.
func (mr *MockStatserMockRecorder) IncrementCount(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementCount", reflect.TypeOf((*MockStatser)(nil).IncrementCount), key)
}
